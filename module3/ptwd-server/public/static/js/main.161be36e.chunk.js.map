{"version":3,"sources":["components/user-pages/Signup.js","components/CountriesList.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Signup","props","state","fullName","email","password","message","event","target","name","value","this","setState","preventDefault","axios","post","process","withCredentials","then","responseFromServer","userDoc","data","onUserChange","catch","err","console","log","currentUser","onSubmit","handleSubmit","onChange","genericSync","type","placeholder","React","Component","CountriesList","theCountriesFromAPI","fetch","responseFromRESTCOUNTRIESApi","json","countries","fetchCountries","map","oneCountry","i","key","Home","App","get","responseFromTheBackend","syncCurrentUSer","user","to","exact","path","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.161be36e.chunk.js","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\n\n\nexport default class Signup extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            fullName: \"\",\n            email: \"\",\n            password:\"\",\n            message: null\n        }\n    }\n\n    genericSync(event){\n        // console.log(\"what is: \", event.target.value)\n        const { name, value } = event.target;\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit (event){\n        // console.log(\"submitting form\");\n        event.preventDefault();\n        \n        axios.post(\n            // route we are hitting in the backend\n            `${process.env.REACT_APP_API_URL}/signup`,\n            // the data from the form (AKA req.body üöÄ) that we are sending to this route to do the job\n            this.state,\n            // secure sending\n            { withCredentials: true }\n        )\n        .then( responseFromServer => {\n            // console.log(\"response is:\", responseFromServer);\n            const { userDoc } = responseFromServer.data;\n            this.props.onUserChange(userDoc);\n        })\n        .catch( err => console.log(\"Err in signup: \", err));\n    }\n\n    render(){\n        console.log(\"Do I have user in Signup: \", this.props.currentUser)\n        const { fullName, email, password } = this.state;\n        // console.log(\"STATE: \", this.state);\n        if(this.props.currentUser){\n            return(\n                <div>\n                    <h2> Welcome to your app, { this.props.currentUser.fullName } ! You're signed in! </h2>\n                </div>\n            )\n        }\n\n        return (\n            <section>\n                <h2> Sign up </h2>\n                <form onSubmit ={ event => this.handleSubmit(event) } >\n                    <label> Full name: </label>\n                    <input\n                        value={fullName} // this.state.fullName\n                        onChange = { event => this.genericSync(event) } \n                        type=\"text\"\n                        name=\"fullName\"\n                        placeholder=\"Jesus\"\n                    />\n\n                     <label> Email: </label>\n                    <input\n                        value={email} // this.state.email\n                        onChange = { event => this.genericSync(event) } \n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"my-email@ironhack.com\"\n                    />\n\n                    <label> Password</label>\n                    <input\n                        value={password} // this.state.password\n                        onChange = { event => this.genericSync(event) } \n                        type=\"password\"\n                        name=\"password\"\n                        placeholder=\"***********\"\n                    />\n                    <button> Sign Up </button>\n                </form>\n                {/* if the message is not null (basically if there's a message) then show it in this <div> tag */}\n                { this.state.message && <div> { this.state.message } </div> }\n            </section>\n\n\n\n\n\n        )\n    }\n}","import React from \"react\";\nimport axios from \"axios\";\n\n\nexport default class CountriesList extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n           theCountriesFromAPI: []\n        }\n    }\n\n\n    // componentDidMount(){\n    //     axios.get(\"https://restcountries.eu/rest/v2/all\")\n    //     .then(responseFromRESTCOUNTRIESApi => {\n    //         // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.data)\n    //         this.setState({ theCountriesFromAPI: responseFromRESTCOUNTRIESApi.data })        \n    //     })\n    //     .catch(err =>console.log(\"Err while getting countries: \", err))\n    // }\n\n    // THE SAME AS ABOVE JUST USING FETCH\n    // componentDidMount(){\n    //     fetch(\"https://restcountries.eu/rest/v2/all\")\n    //     .then(responseFromRESTCOUNTRIESApi => {\n    //         // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.json())\n    //         return responseFromRESTCOUNTRIESApi.json()\n    //     })\n    //     .then(countries => this.setState({ theCountriesFromAPI: countries }))\n    //     .catch(err =>console.log(\"Err while getting countries: \", err))\n    // }\n\n\n    // the same as above just creating the regular method\n    fetchCountries(){\n        fetch(\"https://restcountries.eu/rest/v2/all\")\n        .then(responseFromRESTCOUNTRIESApi => {\n            // console.log(\"Response is: \", responseFromRESTCOUNTRIESApi.json())\n            return responseFromRESTCOUNTRIESApi.json()\n        })\n        .then(countries => this.setState({ theCountriesFromAPI: countries }))\n        .catch(err =>console.log(\"Err while getting countries: \", err))\n    }\n\n\n    render(){\n        const { theCountriesFromAPI } = this.state;\n        return (\n            <div>\n                {/* INVOKE METHOD HERE */}\n                { this.fetchCountries() } \n\n                <ul>\n                    { theCountriesFromAPI.map((oneCountry, i) => {\n                            return (\n                                <li key={i}> {oneCountry.name} </li>\n                            )\n                    })}\n                </ul>\n            </div>\n        )\n    }\n}","import React from \"react\";\n\n\nexport default class Home extends React.Component {\n\n    render(){\n        return (\n            <section>\n                <h1> Home Page </h1>\n                <p> Welcome to the best app ever! ‚ù§Ô∏è </p>\n            </section>\n        )\n    }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport axios from \"axios\";\n\nimport { Switch, Route, NavLink } from \"react-router-dom\";\n\n\nimport Signup from \"./components/user-pages/Signup\";\n\nimport CountriesList from \"./components/CountriesList\";\nimport Home from \"./components/Home\";\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      currentUser: null\n    }\n  }\n\n  componentDidMount(){\n    axios.get(\"http://localhost:3001/api/checkuser\", { withCredentials: true })\n    .then( responseFromTheBackend => {\n      // console.log(\"User in APP.JS: \", responseFromTheBackend)\n      const { userDoc } = responseFromTheBackend.data;\n      this.syncCurrentUSer(userDoc);\n    } )\n    .catch(err => console.log(\"Err while getting the user from the checkuser route: \", err))\n  }\n\n  syncCurrentUSer(user){\n    this.setState({ currentUser: user })\n  }\n\n\n\n  render (){   \n    // console.log(\"the state in APPJS: \", this.state);\n    return (\n      <div >\n        <header>\n          <nav>\n            <NavLink to=\"/\" > Home </NavLink>\n            <NavLink to=\"/signup-page\"> Signup </NavLink>\n            <NavLink to=\"/countries\" > Countries </NavLink>\n          </nav>\n        </header>\n        <Switch>\n        {/* this is example how we would render component normally */}\n        {/* <Route exact path=\"/somePage\" component={ someComponentThatWillRenderWhenThisRouteIsHit }   /> */}\n          <Route exact path=\"/\" component={ Home }   /> \n          <Route exact path=\"/countries\" component={ CountriesList }   /> \n\n          {/* if we have to pass some props down to a component,\n          we can't use a standard way of rendering using component={},\n          but instead we have to use render = {}  like in the example below */}\n          <Route exact path=\"/signup-page\" render = { () => \n            <Signup \n              currentUser = { this.state.currentUser }   \n              onUserChange = { userDoc => this.syncCurrentUSer(userDoc) }   \n            /> \n          }/>\n\n          {/* Login component goes here */}\n\n        </Switch>\n          {/* <CountriesList /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}